! Initial condition for the passive scalar.
! This file contains the expression used for the initial 
! concentration of the passive scalar. You can use temporary 
! real arrays R1-R3 of size (1:n,1:n,ksta:kend) and temporary 
! complex arrays C1-C8 of size (n,n,ista:iend) to do 
! intermediate computations. The variable ci0 should control 
! the global amplitude of the concentration, and variables 
! ciparam0-9 can be used to control the amplitudes of individual 
! terms, where i is the scalar i. At the end, the initial passive 
! scalars in spectral space should be stored in the array thi.

! White noise at specified level relative to initial energy
!     ciparam0: level of noise 
!     ciparam1: wave number that starts adding 1/k^6 noise to energy
!
!               where i = 1, 2, 3

      
! *******************************************************************************
! Generate divergence-free noise:
! *******************************************************************************

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! scalar 1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      C1 = 0.0_GP

      tmp = 1.0_GP/real(n,KIND=GP)**3

! Compute noise components:
      IF (ista.eq.1) THEN
!$omp parallel do
        DO j = 2,n/2+1
          dump = 0.0_GP
          IF ( (ka2(1,j,1).gt.c1param1**2) ) THEN
            rmq  = sqrt(ka2(1,j,1))
            dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1    (1,j,1) = cdump
          C1(1,n-j+2,1) = conjg(C1(1,j,1))
        END DO
!$omp parallel do
        DO k = 2,n/2+1
          dump = 0.0_GP
          IF ( (ka2(k,1,1).gt.c1param1**2) ) THEN
             rmq  = sqrt(ka2(k,1,1))
             dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1    (k,1,1) = cdump
          C1(n-k+2,1,1) = conjg(C1(k,1,1))
        END DO
!$omp parallel do private (k)
        DO j = 2,n
          DO k = 2,n/2+1
            dump = 0.0_GP
            IF ( (ka2(k,j,1).gt.c1param1**2) ) THEN
              rmq  = sqrt(ka2(k,j,1))
              dump = 1.0_GP/rmq**3
            ENDIF
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C1        (k,j,1) = cdump
            C1(n-k+2,n-j+2,1) = conjg(C1(k,j,1))
          END DO
        END DO
!$omp parallel do if (iend-2.ge.nth) private (j,k)
        DO i = 2,iend
!$omp parallel do if (iend-2.lt.nth) private (k)
          DO j = 1,n
            DO k = 1,n
              dump = 0.0_GP
              IF ( (ka2(k,j,i).gt.c1param1**2) ) THEN
                rmq  = sqrt(ka2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
            END DO
          END DO
        END DO
      ELSE
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
        DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
          DO j = 1,n
            DO k = 1,n
              dump = 0.0_GP
              IF ( (ka2(k,j,i).gt.c1param1**2) ) THEN
                rmq  = sqrt(ka2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
            END DO
          END DO
        END DO
      ENDIF
!

! Normalize noise to level set by cparam0:
      CALL variance(C1,tmp,1)
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
    DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
       DO j = 1,n
          DO k = 1,n
             th1(k,j,i) = C1(k,j,i)*c1param0/sqrt(tmp)
          END DO
       END DO
    END DO

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! scalar 2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      C1 = 0.0_GP

      tmp = 1.0_GP/real(n,KIND=GP)**3

! Compute noise components:
      IF (ista.eq.1) THEN
!$omp parallel do
        DO j = 2,n/2+1
          dump = 0.0_GP
          IF ( (ka2(1,j,1).gt.c2param1**2) ) THEN
            rmq  = sqrt(ka2(1,j,1))
            dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1    (1,j,1) = cdump
          C1(1,n-j+2,1) = conjg(C1(1,j,1))
        END DO
!$omp parallel do
        DO k = 2,n/2+1
          dump = 0.0_GP
          IF ( (ka2(k,1,1).gt.c2param1**2) ) THEN
             rmq  = sqrt(ka2(k,1,1))
             dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1    (k,1,1) = cdump
          C1(n-k+2,1,1) = conjg(C1(k,1,1))
        END DO
!$omp parallel do private (k)
        DO j = 2,n
          DO k = 2,n/2+1
            dump = 0.0_GP
            IF ( (ka2(k,j,1).gt.c2param1**2) ) THEN
              rmq  = sqrt(ka2(k,j,1))
              dump = 1.0_GP/rmq**3
            ENDIF
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C1        (k,j,1) = cdump
            C1(n-k+2,n-j+2,1) = conjg(C1(k,j,1))
          END DO
        END DO
!$omp parallel do if (iend-2.ge.nth) private (j,k)
        DO i = 2,iend
!$omp parallel do if (iend-2.lt.nth) private (k)
          DO j = 1,n
            DO k = 1,n
              dump = 0.0_GP
              IF ( (ka2(k,j,i).gt.c2param1**2) ) THEN
                rmq  = sqrt(ka2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
            END DO
          END DO
        END DO
      ELSE
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
        DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
          DO j = 1,n
            DO k = 1,n
              dump = 0.0_GP
              IF ( (ka2(k,j,i).gt.c2param1**2) ) THEN
                rmq  = sqrt(ka2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
            END DO
          END DO
        END DO
      ENDIF
!

! Normalize noise to level set by ciparam0:
      CALL variance(C1,tmp,1)
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
    DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
       DO j = 1,n
          DO k = 1,n
             th2(k,j,i) = C1(k,j,i)*c2param0/sqrt(tmp)
          END DO
       END DO
    END DO

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! scalar 3 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      C1 = 0.0_GP

      tmp = 1.0_GP/real(n,KIND=GP)**3

! Compute noise components:
      IF (ista.eq.1) THEN
!$omp parallel do
        DO j = 2,n/2+1
          dump = 0.0_GP
          IF ( (ka2(1,j,1).gt.c3param1**2) ) THEN
            rmq  = sqrt(ka2(1,j,1))
            dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1    (1,j,1) = cdump
          C1(1,n-j+2,1) = conjg(C1(1,j,1))
        END DO
!$omp parallel do
        DO k = 2,n/2+1
          dump = 0.0_GP
          IF ( (ka2(k,1,1).gt.c3param1**2) ) THEN
             rmq  = sqrt(ka2(k,1,1))
             dump = 1.0_GP/rmq**3
          ENDIF
          phase = 2.0*pi*randu(seed);
          cdump = (cos(phase)+im*sin(phase))*dump
          C1    (k,1,1) = cdump
          C1(n-k+2,1,1) = conjg(C1(k,1,1))
        END DO
!$omp parallel do private (k)
        DO j = 2,n
          DO k = 2,n/2+1
            dump = 0.0_GP
            IF ( (ka2(k,j,1).gt.c3param1**2) ) THEN
              rmq  = sqrt(ka2(k,j,1))
              dump = 1.0_GP/rmq**3
            ENDIF
            phase = 2.0*pi*randu(seed);
            cdump = (cos(phase)+im*sin(phase))*dump
            C1        (k,j,1) = cdump
            C1(n-k+2,n-j+2,1) = conjg(C1(k,j,1))
          END DO
        END DO
!$omp parallel do if (iend-2.ge.nth) private (j,k)
        DO i = 2,iend
!$omp parallel do if (iend-2.lt.nth) private (k)
          DO j = 1,n
            DO k = 1,n
              dump = 0.0_GP
              IF ( (ka2(k,j,i).gt.c3param1**2) ) THEN
                rmq  = sqrt(ka2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
            END DO
          END DO
        END DO
      ELSE
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
        DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
          DO j = 1,n
            DO k = 1,n
              dump = 0.0_GP
              IF ( (ka2(k,j,i).gt.c3param1**2) ) THEN
                rmq  = sqrt(ka2(k,j,i))
                dump = 1.0_GP/rmq**3
              ENDIF
              phase = 2.0*pi*randu(seed);
              cdump = (cos(phase)+im*sin(phase))*dump
              C1(k,j,i) = cdump
            END DO
          END DO
        END DO
      ENDIF
!

! Normalize noise to level set by cparam0:
      CALL variance(C1,tmp,1)
!$omp parallel do if (iend-ista.ge.nth) private (j,k)
    DO i = ista,iend
!$omp parallel do if (iend-ista.lt.nth) private (k)
       DO j = 1,n
          DO k = 1,n
             th3(k,j,i) = C1(k,j,i)*c3param0/sqrt(tmp)
          END DO
       END DO
    END DO

